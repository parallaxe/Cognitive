// generated by https://github.com/tomquist/ReverseJson

import Foundation

extension Array {
    init(jsonValue: AnyObject?, map: AnyObject throws -> Element) throws {
        guard let items = jsonValue as? [AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self = try items.map(map)
    }
}

extension Double {
    init(jsonValue: AnyObject?) throws {
        if let number = jsonValue as? NSNumber {
            self = number.doubleValue
        } else if let number = jsonValue as? Int {
            self = Double(number)
        } else if let number = jsonValue as? Double {
            self = number
        } else if let number = jsonValue as? Float {
            self = Double(number)
        } else {
            throw JsonParsingError.UnsupportedTypeError
        }
    }
}

extension Optional {
    init(jsonValue: AnyObject?, map: AnyObject throws -> Wrapped) throws {
        if let jsonValue = jsonValue where !(jsonValue is NSNull) {
            self = try map(jsonValue)
        } else {
            self = nil
        }
    }
}

extension String {
    init(jsonValue: AnyObject?) throws {
        guard let string = jsonValue as? String else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self = string
    }
}
