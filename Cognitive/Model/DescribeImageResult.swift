// generated by https://github.com/tomquist/ReverseJson

import Foundation

struct DescribeImageResult {
    struct Description {
        struct CaptionsItem {
            let confidence: Double?
            let text: String?
        }
        let captions: [CaptionsItem]?
        let tags: [String]?
    }
    struct Metadata {
        let format: String?
        let height: Double?
        let width: Double?
    }
    let description: Description?
    let metadata: Metadata?
    let requestId: String?
}

extension DescribeImageResult {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.description = try Optional(jsonValue: dict["description"]) { try DescribeImageResult.Description(jsonValue: $0) }
        self.requestId = try Optional(jsonValue: dict["requestId"]) { try String(jsonValue: $0) }
        self.metadata = try Optional(jsonValue: dict["metadata"]) { try DescribeImageResult.Metadata(jsonValue: $0) }
    }
}

extension DescribeImageResult.Description {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.tags = try Optional(jsonValue: dict["tags"]) { try Array(jsonValue: $0) { try String(jsonValue: $0) } }
        self.captions = try Optional(jsonValue: dict["captions"]) { try Array(jsonValue: $0) { try DescribeImageResult.Description.CaptionsItem(jsonValue: $0) } }
    }
}

extension DescribeImageResult.Description.CaptionsItem {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.confidence = try Optional(jsonValue: dict["confidence"]) { try Double(jsonValue: $0) }
        self.text = try Optional(jsonValue: dict["text"]) { try String(jsonValue: $0) }
    }
}

extension DescribeImageResult.Metadata {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.width = try Optional(jsonValue: dict["width"]) { try Double(jsonValue: $0) }
        self.format = try Optional(jsonValue: dict["format"]) { try String(jsonValue: $0) }
        self.height = try Optional(jsonValue: dict["height"]) { try Double(jsonValue: $0) }
    }
}

func parseDescribeImageResult(jsonValue: AnyObject?) throws -> DescribeImageResult {
    return try DescribeImageResult(jsonValue: jsonValue)
}
