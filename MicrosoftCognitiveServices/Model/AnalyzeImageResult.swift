// generated by https://github.com/tomquist/ReverseJson

import Foundation

struct AnalyzeImageResult {
    struct Adult {
        let adultScore: Double?
        let isAdultContent: Double?
        let isRacyContent: Double?
        let racyScore: Double?
    }
    struct CategoriesItem {
        struct Detail {
            struct CelebritiesItem {
                struct FaceRectangle {
                    let `left`: Double?
                    let height: Double?
                    let top: Double?
                    let width: Double?
                }
                let confidence: Double?
                let faceRectangle: FaceRectangle?
                let name: String?
            }
            let celebrities: [CelebritiesItem]?
        }
        let detail: Detail?
        let name: String?
        let score: Double?
    }
    struct Color {
        let accentColor: String?
        let dominantColorBackground: String?
        let dominantColorForeground: String?
        let dominantColors: [String]?
        let isBWImg: Double?
    }
    struct Description {
        struct CaptionsItem {
            let confidence: Double?
            let text: String?
        }
        let captions: [CaptionsItem]?
        let tags: [String]?
    }
    struct FacesItem {
        struct FaceRectangle {
            let `left`: Double?
            let height: Double?
            let top: Double?
            let width: Double?
        }
        let age: Double?
        let faceRectangle: FaceRectangle?
        let gender: String?
    }
    struct ImageType {
        let clipArtType: Double?
        let lineDrawingType: Double?
    }
    struct Metadata {
        let format: String?
        let height: Double?
        let width: Double?
    }
    struct TagsItem {
        let confidence: Double?
        let name: String?
    }
    let adult: Adult?
    let categories: [CategoriesItem]?
    let color: Color?
    let description: Description?
    let faces: [FacesItem]?
    let imageType: ImageType?
    let metadata: Metadata?
    let requestId: String?
    let tags: [TagsItem]?
}

enum JsonParsingError: ErrorType {
    case UnsupportedTypeError
}

extension AnalyzeImageResult {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.color = try Optional(jsonValue: dict["color"]) { try AnalyzeImageResult.Color(jsonValue: $0) }
        self.adult = try Optional(jsonValue: dict["adult"]) { try AnalyzeImageResult.Adult(jsonValue: $0) }
        self.metadata = try Optional(jsonValue: dict["metadata"]) { try AnalyzeImageResult.Metadata(jsonValue: $0) }
        self.tags = try Optional(jsonValue: dict["tags"]) { try Array(jsonValue: $0) { try AnalyzeImageResult.TagsItem(jsonValue: $0) } }
        self.requestId = try Optional(jsonValue: dict["requestId"]) { try String(jsonValue: $0) }
        self.description = try Optional(jsonValue: dict["description"]) { try AnalyzeImageResult.Description(jsonValue: $0) }
        self.faces = try Optional(jsonValue: dict["faces"]) { try Array(jsonValue: $0) { try AnalyzeImageResult.FacesItem(jsonValue: $0) } }
        self.imageType = try Optional(jsonValue: dict["imageType"]) { try AnalyzeImageResult.ImageType(jsonValue: $0) }
        self.categories = try Optional(jsonValue: dict["categories"]) { try Array(jsonValue: $0) { try AnalyzeImageResult.CategoriesItem(jsonValue: $0) } }
    }
}

extension AnalyzeImageResult.Adult {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.adultScore = try Optional(jsonValue: dict["adultScore"]) { try Double(jsonValue: $0) }
        self.racyScore = try Optional(jsonValue: dict["racyScore"]) { try Double(jsonValue: $0) }
        self.isRacyContent = try Optional(jsonValue: dict["isRacyContent"]) { try Double(jsonValue: $0) }
        self.isAdultContent = try Optional(jsonValue: dict["isAdultContent"]) { try Double(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.CategoriesItem {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.detail = try Optional(jsonValue: dict["detail"]) { try AnalyzeImageResult.CategoriesItem.Detail(jsonValue: $0) }
        self.name = try Optional(jsonValue: dict["name"]) { try String(jsonValue: $0) }
        self.score = try Optional(jsonValue: dict["score"]) { try Double(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.CategoriesItem.Detail {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.celebrities = try Optional(jsonValue: dict["celebrities"]) { try Array(jsonValue: $0) { try AnalyzeImageResult.CategoriesItem.Detail.CelebritiesItem(jsonValue: $0) } }
    }
}

extension AnalyzeImageResult.CategoriesItem.Detail.CelebritiesItem {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.faceRectangle = try Optional(jsonValue: dict["faceRectangle"]) { try AnalyzeImageResult.CategoriesItem.Detail.CelebritiesItem.FaceRectangle(jsonValue: $0) }
        self.confidence = try Optional(jsonValue: dict["confidence"]) { try Double(jsonValue: $0) }
        self.name = try Optional(jsonValue: dict["name"]) { try String(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.CategoriesItem.Detail.CelebritiesItem.FaceRectangle {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.width = try Optional(jsonValue: dict["width"]) { try Double(jsonValue: $0) }
        self.top = try Optional(jsonValue: dict["top"]) { try Double(jsonValue: $0) }
        self.height = try Optional(jsonValue: dict["height"]) { try Double(jsonValue: $0) }
        self.`left` = try Optional(jsonValue: dict["left"]) { try Double(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.Color {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.dominantColorForeground = try Optional(jsonValue: dict["dominantColorForeground"]) { try String(jsonValue: $0) }
        self.dominantColorBackground = try Optional(jsonValue: dict["dominantColorBackground"]) { try String(jsonValue: $0) }
        self.isBWImg = try Optional(jsonValue: dict["isBWImg"]) { try Double(jsonValue: $0) }
        self.accentColor = try Optional(jsonValue: dict["accentColor"]) { try String(jsonValue: $0) }
        self.dominantColors = try Optional(jsonValue: dict["dominantColors"]) { try Array(jsonValue: $0) { try String(jsonValue: $0) } }
    }
}

extension AnalyzeImageResult.Description {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.tags = try Optional(jsonValue: dict["tags"]) { try Array(jsonValue: $0) { try String(jsonValue: $0) } }
        self.captions = try Optional(jsonValue: dict["captions"]) { try Array(jsonValue: $0) { try AnalyzeImageResult.Description.CaptionsItem(jsonValue: $0) } }
    }
}

extension AnalyzeImageResult.Description.CaptionsItem {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.confidence = try Optional(jsonValue: dict["confidence"]) { try Double(jsonValue: $0) }
        self.text = try Optional(jsonValue: dict["text"]) { try String(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.FacesItem {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.faceRectangle = try Optional(jsonValue: dict["faceRectangle"]) { try AnalyzeImageResult.FacesItem.FaceRectangle(jsonValue: $0) }
        self.age = try Optional(jsonValue: dict["age"]) { try Double(jsonValue: $0) }
        self.gender = try Optional(jsonValue: dict["gender"]) { try String(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.FacesItem.FaceRectangle {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.width = try Optional(jsonValue: dict["width"]) { try Double(jsonValue: $0) }
        self.top = try Optional(jsonValue: dict["top"]) { try Double(jsonValue: $0) }
        self.height = try Optional(jsonValue: dict["height"]) { try Double(jsonValue: $0) }
        self.`left` = try Optional(jsonValue: dict["left"]) { try Double(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.ImageType {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.clipArtType = try Optional(jsonValue: dict["clipArtType"]) { try Double(jsonValue: $0) }
        self.lineDrawingType = try Optional(jsonValue: dict["lineDrawingType"]) { try Double(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.Metadata {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.width = try Optional(jsonValue: dict["width"]) { try Double(jsonValue: $0) }
        self.format = try Optional(jsonValue: dict["format"]) { try String(jsonValue: $0) }
        self.height = try Optional(jsonValue: dict["height"]) { try Double(jsonValue: $0) }
    }
}

extension AnalyzeImageResult.TagsItem {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.confidence = try Optional(jsonValue: dict["confidence"]) { try Double(jsonValue: $0) }
        self.name = try Optional(jsonValue: dict["name"]) { try String(jsonValue: $0) }
    }
}

func parseAnalyzeImageResult(jsonValue: AnyObject?) throws -> AnalyzeImageResult {
    return try AnalyzeImageResult(jsonValue: jsonValue)
}
