// generated by https://github.com/tomquist/ReverseJson

import Foundation

struct EmotionImageResultItem {
    struct FaceRectangle {
        let `left`: Double?
        let height: Double?
        let top: Double?
        let width: Double?
    }
    struct Scores {
        let anger: Double?
        let contempt: Double?
        let disgust: Double?
        let fear: Double?
        let happiness: Double?
        let neutral: Double?
        let sadness: Double?
        let surprise: Double?
    }
    let faceRectangle: FaceRectangle?
    let scores: Scores?
}

extension EmotionImageResultItem {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.scores = try Optional(jsonValue: dict["scores"]) { try EmotionImageResultItem.Scores(jsonValue: $0) }
        self.faceRectangle = try Optional(jsonValue: dict["faceRectangle"]) { try EmotionImageResultItem.FaceRectangle(jsonValue: $0) }
    }
}

extension EmotionImageResultItem.FaceRectangle {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.width = try Optional(jsonValue: dict["width"]) { try Double(jsonValue: $0) }
        self.top = try Optional(jsonValue: dict["top"]) { try Double(jsonValue: $0) }
        self.height = try Optional(jsonValue: dict["height"]) { try Double(jsonValue: $0) }
        self.`left` = try Optional(jsonValue: dict["left"]) { try Double(jsonValue: $0) }
    }
}

extension EmotionImageResultItem.Scores {
    init(jsonValue: AnyObject?) throws {
        guard let dict = jsonValue as? [NSObject: AnyObject] else {
            throw JsonParsingError.UnsupportedTypeError
        }
        self.anger = try Optional(jsonValue: dict["anger"]) { try Double(jsonValue: $0) }
        self.happiness = try Optional(jsonValue: dict["happiness"]) { try Double(jsonValue: $0) }
        self.surprise = try Optional(jsonValue: dict["surprise"]) { try Double(jsonValue: $0) }
        self.disgust = try Optional(jsonValue: dict["disgust"]) { try Double(jsonValue: $0) }
        self.neutral = try Optional(jsonValue: dict["neutral"]) { try Double(jsonValue: $0) }
        self.contempt = try Optional(jsonValue: dict["contempt"]) { try Double(jsonValue: $0) }
        self.sadness = try Optional(jsonValue: dict["sadness"]) { try Double(jsonValue: $0) }
        self.fear = try Optional(jsonValue: dict["fear"]) { try Double(jsonValue: $0) }
    }
}

func parseEmotionImageResult(jsonValue: AnyObject?) throws -> [EmotionImageResultItem] {
    return try Array(jsonValue: jsonValue) { try EmotionImageResultItem(jsonValue: $0) }
}
